
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.igormaznitsa:jcp:7.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.igormaznitsa.jcp'

group 'org.example'
version '1.0-SNAPSHOT'

mainClassName = 'java.HelloWorld'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes "Main-Class": "HelloWorld"
    }
    archiveBaseName = 'first'
}

task compileWithJava8 (type: com.igormaznitsa.jcp.gradle.JcpTask) {

    sourceSets.main.output.each { println it}
        println "executing compileWithJava8"

//        preprocess {
            sources = sourceSets.main.java.srcDirs
            allowWhitespaces = true
            eol = '\r\n'
            keepAttributes = true
            sourceEncoding = 'UTF-8'
            targetEncoding = 'UTF-8'
            ignoreMissingSources = false
            excludeExtensions = ['txt', 'xml']
            fileExtensions = ['java']
            unknownVarAsFalse = false
            dryRun = false
            verbose = true
            clearTarget = true
            careForLastEol = true
            keepComments = true
            excludeFolders = ['**/some1', '**/some2']
            //    configFiles = ['./configFile.txt']
            keepLines = true
            allowWhitespaces = true
            preserveIndents = true
            dontOverwriteSameContent = false
            vars = [isJava8: 'true']
            target = new File(project.buildDir, "jcp" + File.separatorChar + "java")
//        }
//        doLast{
//            println("Incoming preprocess files: " + preprocess.incomingFiles.size())
//            println("Resulted preprocess files: " + preprocess.outcomingFiles.size())
//        }
//        task(changeSourceFolder1) {
//            sourceSets.main.java.srcDirs = [preprocess.target]
//        }.dependsOn preprocess
//        compileJava.dependsOn preprocess

}

task compileWithJava11 (type: com.igormaznitsa.jcp.gradle.JcpTask) {

        println "executing compileWithJava11"
        println sourceSets.main.java.srcDirs

        sources = sourceSets.main.java.srcDirs
        allowWhitespaces = true
        eol = '\r\n'
        keepAttributes = true
        sourceEncoding = 'UTF-8'
        targetEncoding = 'UTF-8'
        ignoreMissingSources = false
        excludeExtensions = ['txt', 'xml']
        fileExtensions = ['java']
        unknownVarAsFalse = false
        dryRun = false
        verbose = true
        clearTarget = true
        careForLastEol = true
        keepComments = true
        excludeFolders = ['**/some1', '**/some2']
        //    configFiles = ['./configFile.txt']
        keepLines = true
        allowWhitespaces = true
        preserveIndents = true
        dontOverwriteSameContent = false
        vars = [isJava8: 'false']
        target = new File(project.buildDir, "jcp" + File.separatorChar + "java11")

        doLast{
            println("Incoming preprocess files: " + incomingFiles.size())
            println("Resulted preprocess files: " + outcomingFiles.size())
        }


//        task(changeSourceFolder2) {
//            sourceSets.main.java.srcDirs = [preprocess.target]
//        }.dependsOn preprocess

}

import java.security.MessageDigest
import java.io.FileInputStream;
import java.nio.file.Files;
import java.nio.file.Paths
task deleteDuplicatedFiles(){

    doLast {

        Set<String> fileSet = new HashSet<>()

        FileTree javaTree = fileTree(dir: 'build/jcp/java')
        javaTree.visit { FileVisitDetails fvd ->
            if(fvd.file.isFile()) {

                byte[] fileContent = Files.readAllBytes(Paths.get(fvd.file.toString()));
                byte[] hash = MessageDigest.getInstance("MD5").digest(fileContent);

                fileSet.add(hash.toString())
            }
        }

        FileTree java11Tree = fileTree(dir: 'build/jcp/java11')
        java11Tree.visit { FileVisitDetails fvd ->
            if(fvd.file.isFile()) {

                byte[] fileContent = Files.readAllBytes(Paths.get(fvd.file.toString()));
                byte[] hash = MessageDigest.getInstance("MD5").digest(fileContent);

                if (fileSet.contains(hash.toString())){
                    println ("found duplicated file: " + fvd.file)
                    project.delete(
                            files(fvd.file)
                    )
                    println ("found duplicated file: " + fvd.file)
                }

            }
        }


    }

}

compileWithJava8.dependsOn(compileWithJava11)
deleteDuplicatedFiles.dependsOn compileWithJava8
compileJava.dependsOn deleteDuplicatedFiles





//compileJava.dependsOn preprocess

//gradle.buildFinished {
//    println("Incoming preprocess files: " + preprocess.incomingFiles.size())
//    println("Resulted preprocess files: " + preprocess.outcomingFiles.size())
//}

// move files around

// change files tree

// using HashMap
//

// Delete dupilcated files
// Java 8 tree

// Java 11 tree



